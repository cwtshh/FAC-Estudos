.data
    ln: .asciiz "\n"
    str_hi: .asciiz "hi = "
    str_lo: .asciiz "lo = "

    str_vol: .asciiz "AQUI\n"

    cont: .asciiz "contador: "

    acumula: .asciiz "ACUMULA\n"

.text

main:
    # lendo os numeros

    li $v0, 5
    syscall

    move $a0, $v0 # M

    li $v0, 5
    syscall

    move $a1, $v0 # Q

    j multifac


verifica_sinal:
    xor $s3, $s7, $s6
    slt $s3, $s3, $zero 
    
    bne $s3, $zero, inverte

    jr $ra

inverte:
    la $a0, str_vol
    li $v0, 4
    syscall
    addu $s7, $s7, $zero
    addu $t1, $t1, $zero

    li $v0, 4
    la $a0, ln
    syscall

    move $s0, $s7
    li $v0, 1
    syscall

    li $v0, 4
    la $a0, ln
    syscall


    jr $ra

encerrar:

    li $v0, 4
    la $a0, str_hi
    syscall

    li $v0, 1
    move $a0, $t0
    syscall

    li $v0, 4
    la $a0, ln
    syscall

    li $v0, 4
    la $a0, str_lo
    syscall

    li $v0, 1
    move $a0, $t1
    syscall

    li $v0, 4
    la $a0, ln
    syscall

    li $v0, 10
    syscall


multifac:
    li $t0, 0 # HI
    li $t1, 0 # lo

    li $t7, 0 # contador
    li $t6, 32 # limite

    move $s7, $a0 # copia M para s7
    move $s6, $a1

    move $t1, $a1 # copia Q para LO

    jal verifica_sinal

    j mult_loop

mult_loop:
    # se contador chegar em 32 encerra
    beq $t7, $t6, encerrar 
    # adiciona no contador
    addi $t7, $t7, 1

    # pega o bit menos significativo de LO
    andi $t3, $t1, 1
    bne $t3, $zero, incrementar
    
    andi $t3, $t0, 1
    srl $t0, $t0, 1
    
    sll $t3, $t3, 31

    srl $t1, $t1, 1
    or $t1, $t1, $t3


    j mult_loop 

incrementar:
    addu $t0, $t0, $s7
    andi $t3, $t0, 1
    srl $t0, $t0, 1
    sll $t3, $t3, 31
    srl $t1, $t1, 1
    or $t1, $t1, $t3
    j mult_loop

   










